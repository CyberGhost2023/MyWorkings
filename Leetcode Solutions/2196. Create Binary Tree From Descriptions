/*
Question Link- https://leetcode.com/problems/create-binary-tree-from-descriptions/
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& d) {
        unordered_map<int,TreeNode *> mp;
        unordered_map<int,bool> mp2;
        for(auto x:d)
        {
            TreeNode *p=mp.find(x[0])!=mp.end()?mp[x[0]]:new TreeNode(x[0]);
            TreeNode *c=mp.find(x[1])!=mp.end()?mp[x[1]]:new TreeNode(x[1]);
            if(x[2]==1)
            {
                p->left=c;
            }
            else
                p->right=c;
            mp[x[0]]=p;
            mp[x[1]]=c;
            mp2[x[1]]=1;
            if(mp2.find(x[0])==mp2.end())
                mp2[x[0]]=0;
        }
        for(auto x:mp2)
        {
            if(x.second==0)
                return mp[x.first];
        }
        return NULL;
        
    }
};
