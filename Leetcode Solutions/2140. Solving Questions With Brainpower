/*
Question Link- https://leetcode.com/problems/solving-questions-with-brainpower/

Time & space Complexity- O(N)
*/

// My Own long one

class Solution {
public:
    long long solve(vector<vector<int>> &q, int ind,vector<long long> &dp)
    {
        long long n=q.size();
        if(ind>=n)
            return 0;
        if(dp[ind]!=-1)
            return dp[ind];
        dp[ind]=max(q[ind][0]+solve(q,ind+1+q[ind][1],dp),solve(q,ind+1,dp));
        return dp[ind];
    }
    long long mostPoints(vector<vector<int>>& q) {
        vector<long long> dp(q.size(),-1);
        return solve(q,0,dp);
    }
};


// Short code

class Solution {
public:
    long long mostPoints(vector<vector<int>>& q) {
        vector<long long> dp(300005,0);
        int n=q.size();
        for(int i=n-1;i>=0;i--)
            dp[i]=max(q[i][0]+dp[i+q[i][1]+1],dp[i+1]);
        return dp[0];
    }
};
